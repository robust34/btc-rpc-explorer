- var totalIOValues = utils.getTxTotalInputOutputValues(tx, txInputs, blockHeight);

mixin asciiHexDataDisplay(dataName, uniqueId, hex)
	div
		.d-inline-block.small.border.rounded.p-1.px-2.card-highlight.word-wrap
			span.fw-light(title=`ASCII-encoded ${dataName}`, data-bs-toggle="tooltip") #{utils.hex2ascii(hex)}

		a.text-muted.ms-2(href="javascript:void(0)", onclick=`$('#hex-${uniqueId}').toggle(); $(this).find(".toggle-plus-minus").toggleClass("fa-plus-square"); $(this).find(".toggle-plus-minus").toggleClass("fa-minus-square"); return false;`, title="Toggle Hex Display", data-bs-toggle="tooltip")
			i.toggle-plus-minus.far.fa-plus-square

	div(id=`hex-${uniqueId}`, style="display: none;")
		.d-inline-block.small.border.rounded.p-1.px-2.mt-2.word-wrap.card-highlight
			span.fw-light(title=`Hex-encoded ${dataName}`, data-bs-toggle="tooltip") #{hex}


mixin inputValueDisplay(tx, txVin, vout)
	if (txVin.coinbase)
		span.border-dotted.me-1(title="This is the <b>block subsidy</b> - newly created coins awarded (automatically, by the network protocol) to the miner that found this block.", data-bs-toggle="tooltip", data-bs-html="true")
			i.fas.fa-asterisk.text-success

		span(class=(tx.vin.length == 1 ? "fw-bold" : false))
			- var currencyValue = coinConfig.blockRewardFunction(blockHeight, activeBlockchain);
			+valueDisplay(currencyValue)

	else
		if (vout && vout.value)
			span(class=(tx.vin.length == 1 ? "fw-bold" : "fw-light"))
				+valueDisplay(vout.value)

		else if (!global.txindexAvailable)
			span(title="This data is unavailable. Your node must have its transaction index (txindex) setting enabled to view it.", data-bs-toggle="tooltip")
				i.fas.fa-backspace.text-danger


mixin outputValueDisplay(vout, voutIndex)
	if (!vout.scriptPubKey.asm.startsWith('OP_RETURN '))
		if (utxos)
			if (utxos[voutIndex])
				span(title="This output remains unspent (a valid UTXO)." data-bs-toggle="tooltip")
					i.fas.fa-lock.fa-sm.text-success.me-2

			else if (utxos[voutIndex] == null)
				span(title="This output has been spent (destroyed)." data-bs-toggle="tooltip")
					i.fas.fa-lock-open.fa-sm.text-secondary.me-2

	if (vout.value > 0 && vout.scriptPubKey.asm.startsWith('OP_RETURN '))
		span(title="Burned output - as an OP_RETURN output, this value is provably unspendable." data-bs-toggle="tooltip")
			i.fas.fa-fire.text-danger.me-2

	if (vout.value > 0)
		span(class=(nonZeroVoutValueCount == 1 ? "fw-bold" : "fw-light"))
			+valueDisplay(vout.value)

.row
	.col-lg-6(class=(tx.vin.length >= tx.vout.length ? "border-lg-end" : false))
		if (txInputs || !global.txindexAvailable)
			- var extraInputCount = 0;
			each txVin, txVinIndex in tx.vin
				if (!txVin.coinbase)
					- var vout = null;
					if (txInputs && txInputs[txVinIndex])
						- var txInput = txInputs[txVinIndex];
						- var vout = txInput;

					else if (!global.txindexAvailable)
						- var txInput = {txid:txVin.txid, vout:txVin.vout};
						- var vout = {};

				if (txVin.coinbase || vout || !global.txindexAvailable)
					.clearfix
						a.badge.fw-normal.card-highlight.border.text-decoration-none.me-2(data-bs-toggle="tooltip", title=`Input #${txVinIndex.toLocaleString()}`, style="white-space: nowrap;")
							//span.d-none.d-md-inline.me-tiny &gt;
							i.d-inline.fas.fa-arrow-right.text-danger.me-1
							
							if (tx.vin.length > 999)
								small.word-wrap #{txVinIndex}
							else
								span #{txVinIndex.toLocaleString()}
								
							if (tx.vin.length > 0)
								small.d-inline.d-md-none.fw-light.text-muted  / #{(tx.vin.length - 1).toLocaleString()}

						if (vout && vout.scriptPubKey)
							span(title=`Input Type: ${utils.outputTypeName(vout.scriptPubKey.type)}`, data-bs-toggle="tooltip")
								+darkBadge(utils.outputTypeAbbreviation(vout.scriptPubKey.type))

						if (vout && vout.coinbaseSpend)
							span.badge.bg-success.me-2
								span(title=`This input spends a coinbase output (mining reward), meaning that this represents the first time these coins have been spent.`, data-bs-toggle="tooltip") 1st spend

						span.ms-1.float-end
							+inputValueDisplay(tx, txVin, vout)


						if (txVin.coinbase)
							span.badge.bg-success(title="Coinbase transactions are special transactions created by the miner of a block. They distribute the block reward (subsidy) as the miner chooses, along with all of the fees paid by transactions included in the block.", data-bs-toggle="tooltip") coinbase
							
							.mt-2
								+asciiHexDataDisplay("coinbase data", "coinbase-data", txVin.coinbase)


						else
							span.word-wrap
								if (vout.utxoTime)
									- var deltaT = tx.time - vout.utxoTime
									- var deltaTYears = deltaT / 60 / 60 / 24 / 365

									if (deltaTYears > 5)
										span.me-2(title=`This UTXO was very old! It existed for ${parseInt(deltaTYears)}+ years - from ${moment.utc(new Date(vout.utxoTime * 1000)).format('MMM D, Y')} until ${moment.utc(new Date(tx.time * 1000)).format('MMM D, Y')} - before being spent (destroyed) in this transaction!`, data-bs-toggle="tooltip")
											+funItemIcon
									
								
								span.mt-1
									a.d-none.d-xl-inline(href=`./tx/${txInput.txid}#output-${txVin.vout}`) #{utils.ellipsizeMiddle(txInput.txid, 22)}
										span  ##{txVin.vout}

									a.d-inline.d-xl-none(href=`./tx/${txInput.txid}#output-${txVin.vout}`) #{utils.ellipsizeMiddle(txInput.txid, 14)}
										span  ##{txVin.vout}

							if (vout && vout.scriptPubKey)
								- var voutAddresses = utils.getVoutAddresses(vout);

								if (voutAddresses.length > 0)
									.word-wrap.mt-2
										a.d-none.d-md-inline(href=`./address/${voutAddresses[0]}`, class=(txIOHighlightAddress == voutAddresses[0] ? "text-info" : null)) #{utils.ellipsizeMiddle(voutAddresses[0], 44)}
										a.d-inline.d-md-none(href=`./address/${voutAddresses[0]}`, class=(txIOHighlightAddress == voutAddresses[0] ? "text-info" : null)) #{utils.ellipsizeMiddle(voutAddresses[0], 24)}


										if (txIOHighlightAddress == voutAddresses[0])
											span(title="Current address", data-bs-toggle="tooltip")
												i.fas.fa-arrow-left.text-warning.ms-1.text-info

										if (global.specialAddresses[voutAddresses[0]])
											- var specialAddressInfo = global.specialAddresses[voutAddresses[0]];
											if (specialAddressInfo.type == "minerPayout")
												span  
												a(data-bs-toggle="tooltip", title=`Miner payout address: ${specialAddressInfo.minerInfo.name}`)
													+funItemIcon

									if (false)
										small
											span.border-dotted(title="Transaction output", data-bs-toggle="tooltip") txo
											span.me-1 :
											a(href=`./tx/${txInput.txid}#output-${txVin.vout}`) #{utils.ellipsize(txInput.txid, 20)}[#{txVin.vout}]

							else
									

					if (tx.vin.length > 1)
						hr

				else
					- extraInputCount = extraInputCount + 1;

			if (extraInputCount > 0)
				.clearfix
					a.badge.fw-normal.card-highlight.border.text-decoration-none(data-bs-toggle="tooltip", title=`Input #${(tx.vin.length - extraInputCount + 1).toLocaleString()} - ${tx.vin.length.toLocaleString()}`, style="white-space: nowrap;")
						//span.me-1 &gt;
						i.fas.fa-arrow-right.text-danger.me-2
						span.d-inline.d-md-none.me-1 Input
						span +#{extraInputCount.toLocaleString()}

					small.text-muted.border-dotted.ms-2(data-bs-toggle="tooltip", title="The details for the remaining inputs were truncated for performance purposes. Click through to the transaction details to see all inputs.") (truncated)

					.float-end
						- var currencyValue = new Decimal(totalIOValues.output).minus(new Decimal(totalIOValues.input));
						span.border-dotted.me-1(title="The total amounts for other inputs are approximately equal to this value, plus the mining fee paid.", data-bs-toggle="tooltip") ~+
						+valueDisplay(currencyValue)

					div
						small.text-muted
							span.me-1 (
							a(href=`./tx/${tx.txid}`) transaction details
								i.fas.fa-external-link-alt.fa-sm.ms-1
							span.ms-1 )
				hr

			if (totalIOValues.input && totalIOValues.input > 0 && tx.vin.length > 1)
				.row.mb-3.mb-md-0
					.col
						.text-end
							if (totalIOValues.input > 0 && extraInputCount == 0)
								span.d-block.d-md-none Total Input:
								
								i.d-inline.d-md-none.fas.fa-arrow-right.text-danger.me-2
								span.fw-bold
									+valueDisplay(totalIOValues.input)

							else if (extraInputCount > 0)
								span.d-block.d-md-none Total Input:
								
								i.d-inline.d-md-none.fas.fa-arrow-right.text-danger.me-2
								span.border-dotted.me-1(title="The total input amount for this transaction is approximately equal to this value, plus the mining fee paid.", data-bs-toggle="tooltip") ~+
								span.fw-bold
									+valueDisplay(totalIOValues.output)
		


	.d-lg-none
		.my-4
			hr

	.col-lg-6(class=(tx.vout.length > tx.vin.length ? "border-lg-start" : false))
		- var maxRegularRowCount = (txIOHighlightAddress != null ? config.site.addressPage.txOutputMaxDefaultDisplay : 10000000);
		- var regularRowCount = 0;
		- var hiddenRowCount = 0;
		- var nonZeroVoutValueCount = tx.vout.filter(vout => { return vout.value > 0; }).length;

		each vout, voutIndex in tx.vout
			- var voutAddresses = utils.getVoutAddresses(vout);

			- var highlightRow = false;
			if (txIOHighlightAddress != null && voutAddresses.length > 0 && voutAddresses[0] == txIOHighlightAddress)
				- highlightRow = true;

			if (!highlightRow)
				- regularRowCount++;

			- var hiddenRow = false;
			if (!highlightRow && regularRowCount > maxRegularRowCount)
				- hiddenRow = true;
				- hiddenRowCount++;

			div(data-txid=tx.txid, class=(hiddenRow ? "d-none" : ""))
				.clearfix
					a.badge.card-highlight.border.text-decoration-none.fw-normal(data-bs-toggle="tooltip", title=`Output #${voutIndex.toLocaleString()}`, style="white-space: nowrap;")
						//span.d-none.d-md-inline.me-tiny &lt;
						i.d-inline.fas.fa-arrow-right.text-success.me-1
						
						if (tx.vout.length > 999)
							small.word-wrap #{voutIndex}
						else
							span #{voutIndex.toLocaleString()}
						
						if (tx.vout.length > 0)
							small.d-inline.d-md-none.fw-light.text-muted  / #{(tx.vout.length - 1).toLocaleString()}

					if (vout && vout.scriptPubKey)
						if (vout.scriptPubKey.hex && vout.scriptPubKey.hex.startsWith('6a24aa21a9ed'))
							span.ms-2
								+primaryBadge("OP_RETURN")
								
								a(href="https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure", data-bs-toggle="tooltip", title="Read about the SegWit Commitment", target="_blank")
									+darkBadge("SegWit")
										i.fas.fa-flag.fa-sm.ms-1
										i.fas.fa-external-link-alt.fa-sm.ms-1

							.my-2
								+asciiHexDataDisplay("OP_RETURN data", `op_return-${tx.txid}-${vout.n}`, vout.scriptPubKey.asm.substring("OP_RETURN ".length))

						else if (vout.scriptPubKey.asm && vout.scriptPubKey.asm.startsWith('OP_RETURN '))
							span.ms-2
								+primaryBadge("OP_RETURN")

							.my-2
								+asciiHexDataDisplay("OP_RETURN data", `op_return-${tx.txid}-${vout.n}`, vout.scriptPubKey.asm.substring("OP_RETURN ".length))
						
						else if (vout.scriptPubKey.type)
							span.ms-2
								+darkBadge
									span(title=`Output Type: ${utils.outputTypeName(vout.scriptPubKey.type)}`, data-bs-toggle="tooltip") #{utils.outputTypeAbbreviation(vout.scriptPubKey.type)}
							

					span.ms-2.float-end
						+outputValueDisplay(vout, voutIndex)

					if (vout && vout.scriptPubKey.asm && !vout.scriptPubKey.asm.startsWith("OP_RETURN "))
						if (voutAddresses.length == 0)
							.my-2
								+asciiHexDataDisplay("ASM data", `asm-${tx.txid}-${vout.n}`, vout.scriptPubKey.asm)


					if (voutAddresses.length > 0)
						.mt-2
							each addr in voutAddresses
								a.d-none.d-md-inline(id=`output-${voutIndex}`, href=`./address/${addr}`)
									span(class=(highlightRow ? "text-info" : null)) #{utils.ellipsizeMiddle(addr, 44)}

								a.d-inline.d-md-none(id=`output-${voutIndex}`, href=`./address/${addr}`)
									span(class=(highlightRow ? "text-info" : null)) #{utils.ellipsizeMiddle(addr, 24)}

								if (highlightRow)
									span(title="Current address", data-bs-toggle="tooltip")
										i.fas.fa-arrow-left.ms-1.text-warning

								if (global.specialAddresses[addr])
									- var specialAddressInfo = global.specialAddresses[addr];
									if (specialAddressInfo.type == "minerPayout")
										span  
										a(data-bs-toggle="tooltip", title=`Miner payout address: ${specialAddressInfo.minerInfo.name}`)
											+funItemIcon

								br

					

					if (vout.scriptPubKey)
						if (voutAddresses.length > 0)
							

						else if (false)
							.mb-tiny
								span(title=`Output Type: ${utils.outputTypeName(vout.scriptPubKey.type)}`, data-bs-toggle="tooltip")
									+darkBadge(utils.outputTypeAbbreviation(vout.scriptPubKey.type))

							+asciiHexDataDisplay("ASM data", `asm-${tx.txid}-${vout.n}`, vout.scriptPubKey.asm)


				if (voutIndex < (tx.vout.length - 1) || nonZeroVoutValueCount > 1)
					hr

				else
					.mb-3

		if (hiddenRowCount > 0)
			a(href="javascript:void(0)", onclick=("showAllTxOutputs(this, '" + tx.txid + "');")) Show all #{tx.vout.length.toLocaleString()} outputs

		if (nonZeroVoutValueCount > 1)
			.row.mb-0.mb-lg-0
				.col
					.text-end.text-md-end
						span.d-block.d-md-none Total Output:

						span.fw-bold
							i.d-inline.d-md-none.fas.fa-arrow-right.text-success.me-2
							+valueDisplay(totalIOValues.output)


