extends layout

block headContent
	title Address #{address}

block content
	if (result && result.validateaddress)
		if (!result.validateaddress.isvalid)
			h1(class="h3 text-danger") Invalid Address
				br
				small(class="monospace") #{address}
		else
			h1(class="h3") Address
				br
				small(class="monospace") #{address}
			
			hr

			if (payoutAddressForMiner)
				div(class="alert alert-primary", style="padding-bottom: 0;")
					div(class="float-left", style="width: 50px; height: 50px; font-size: 18px;")
						i(class="fas fa-certificate fa-2x", style="margin-top: 10px;")

					h4(class="alert-heading h5") #{coinConfig.name} Fun

					p
						span This looks like a miner payout address for  
						span(class="font-weight-bold") #{payoutAddressForMiner.name}
						if (coinConfig.miningPoolsConfigUrls.length > 1)
							span  (see the configurations: 
							each item, index in coinConfig.miningPoolsConfigUrls
								if (index > 0)
									span , 
								a(href=item) config ##{index + 1}
							span )
						else
							span  (see the configuration
							a(href=coinConfig.miningPoolsConfigUrls[0]) here
							span )

			if (false)
				pre
					code #{JSON.stringify(addressObj, null, 4)}
			
			ul(class='nav nav-tabs mb-3')
				li(class="nav-item")
					a(data-toggle="tab", href="#tab-details", class="nav-link active", role="tab") Details
				li(class="nav-item")
					a(data-toggle="tab", href="#tab-raw", class="nav-link", role="tab") Raw


			div(class="tab-content")
				div(id="tab-details", class="tab-pane active", role="tabpanel")

					div(class="card mb-3")
						div(class="card-header")
							span(class="h6") Summary
						div(class="card-body")
							table(class="table details-table mb-0")
								if (addressObj.hash)
									tr
										td(class="properties-header") Hash 160
										td(class="monospace") #{addressObj.hash.toString("hex")}

								if (result.validateaddress.scriptPubKey)
									tr
										td(class="properties-header") Script Public Key
										td(class="monospace") #{result.validateaddress.scriptPubKey}

								if (addressObj.hasOwnProperty("version"))
									tr
										td(class="properties-header") Version
										td(class="monospace") #{addressObj.version}

								if (result.validateaddress.hasOwnProperty("witness_version"))
									tr
										td(class="properties-header") Witness Version
										td(class="monospace") #{result.validateaddress.witness_version}

								if (result.validateaddress.witness_program)
									tr
										td(class="properties-header") Witness Program
										td(class="monospace") #{result.validateaddress.witness_program}

								tr
									td(class="properties-header") QR Code
									td(class="monospace")
										img(src=addressQrCodeUrl, alt=address, style="border: solid 1px #ccc;")

					div(class="card mb-3")
						div(class="card-header")
							span(class="h6") Flags
						div(class="card-body")
							table(class="table text-center")
								thead
									tr
										th Is Valid?
										th Is Script?
										th Is Witness?
										th Is Mine?
										th Is Watch-Only?
								tbody
									tr
										- var x = result.validateaddress;
										- var flags = [x.isvalid, x.isscript, x.iswitness, x.ismine, x.iswatchonly];

										each flag in flags
											td
												if (flag)
													i(class="fas fa-check text-success")
												else
													i(class="fas fa-times text-danger")

					div(class="card")
						div(class="card-header")
							span(class="h6") Transactions
						div(class="card-body")
							table(class="table")
								strong
									p(class="text-warning") This is a work-in-progress
								p Since this app is database-free, displaying a list of transactions involving the current address is tricky. I'm actively researching the best way to implement this.

								a(href="https://github.com/janoside/btc-rpc-explorer/issues/8") Suggestions and/or pull requests are welcome!
				

				div(id="tab-raw", class="tab-pane", role="tabpanel")
					div(class="highlight")
						pre
							code(class="language-json", data-lang="json") #{JSON.stringify(result.validateaddress, null, 4)}

		
